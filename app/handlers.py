import random,os,asyncio
from aiogram import F,Router
from aiogram.filters import CommandStart,Command
from aiogram.types import Message,CallbackQuery,FSInputFile
import app.keyboard as kb
from aiogram.fsm.state import State,StatesGroup
from aiogram.enums.message_entity_type import MessageEntityType
from dotenv import load_dotenv
from openai import OpenAI
from app.database.database import async_session
from app.database.models import Game
from sqlalchemy import select
load_dotenv()
router = Router()

def generate():
    client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("AITOKEN"),
    )

    completion = client.chat.completions.create(
    extra_headers={},
    extra_body={},
    model="deepseek/deepseek-chat-v3-0324",
    messages=[
        {
        "role": "user",
        "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–æ–º –∏–∑ 5 –±—É–∫–≤,—Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ –±–æ–ª—å—à–µ –ù–ò–ß–ï–ì–û –ù–ò –°–ö–û–ë–ö–ò –ù–ò –≠–ú–û–î–ó–ò –ü–†–û–°–¢–û –°–õ–û–í–û –ò–ú–ï–ù–ù–û –ò–ó 5 –ë–£–ö–í"
        }
    ]
    )
    ans = completion.choices[0].message.content
    if len(ans) != 5:
        return generate()
    return ans.lower()

def ask(a):
    client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("AITOKEN"),
    )
    completion = client.chat.completions.create(
    extra_headers={},
    extra_body={},
    model="deepseek/deepseek-chat-v3-0324",
    messages=[
        {
        "role": "user",
        "content": f"–û–¢–í–ï–¢–¨ –û–î–ù–ò–ú –°–õ–û–í–û–ú.–ï–°–õ–ò –≠–¢–û –°–õ–û–í–û - {a} –ï–°–¢–¨ –í –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï –ù–ê–ü–ò–®–ò True,–∏–Ω–∞—á–µ False –ü–†–û–°–¢–û True –∏–ª–∏ False !!!,–ü–†–ò–ú–ï–† –º–µ–≥–∞—Ä–∏—â–µ -> False,–∫–æ—à–∫–∞ -> True"
        }
    ]
    )
    ans = completion.choices[0].message.content
    if ans == "True":
        return True
    elif ans == 'False':
        return False
    else : 
        return ask(a)

@router.message(CommandStart())
async def start(message : Message):
    await message.reply(f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ø—Ä–æ Wordle, {message.from_user.first_name} !\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è ‚§µÔ∏è</b>\n–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ Wordle:\n–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–≥—Ä–∞—Ç—å, –±–æ—Ç –≤—ã–±–µ—Ä–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ 5 –±—É–∫–≤. –í–∞–º –Ω–∞–¥–æ –±—É–¥–µ—Ç —É–≥–∞–¥–∞—Ç—å –∫–∞–∫–æ–µ –∂–µ —ç—Ç–æ —Å–ª–æ–≤–æ.\n–ß—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –≤—ã –¥–æ–ª–∂–Ω—ã —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ 5 –±—É–∫–≤, –∞ –±–æ—Ç —Å–∫–∞–∂–µ—Ç –∫–∞–∫–∏–µ –±—É–∫–≤—ã –ø–æ–¥—Ö–æ–¥—è—Ç, –∞ –∫–∞–∫–∏–µ –Ω–µ—Ç. –í–æ—Ç —á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –æ—Ç –±–æ—Ç–∞ :\nüü• -> –û–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —ç—Ç–æ–π –±—É–∫–≤—ã –≤–æ–æ–±—â–µ –Ω–µ—Ç—É –≤ —Å–ª–æ–≤–µ\nüü® -> –û–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —ç—Ç–∞ –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ –Ω–æ –æ–Ω–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ\nüü© -> –û–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∏ –±—É–∫–≤–∞ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—ã\n–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è —Ç–æ–≥–¥–∞ –∫–æ–≥–¥–∞ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ 5 –±—É–∫–≤\n–£–¥–∞—á–∏ –∏–≥—Ä–æ–∫–∏ üçÄ",reply_markup=kb.main2,parse_mode="HTML")
    await message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –µ—Å—Ç—å 6 –ø–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ,–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–Ω–∏–∑—É ‚§µÔ∏è",reply_markup=kb.main3)
    async with async_session() as session:
        game = await session.get(Game, message.from_user.id)
        if not game:
            game = Game(
                user_id = message.from_user.id,
                word = "",
                lifes = 6,
                infinity = False,
                is_playing = False
            )
        session.add(game)
        await session.commit()

@router.message(F.text == "my_id")
async def my_id(message : Message):
    await message.reply(f"–í–∞—à id : {message.from_user.id}")

@router.message(Command("settings"))
async def settings1(message : Message):
    await message.delete()
    async with async_session() as session:
        game = await session.get(Game,message.from_user.id)
        if game:
            if game.is_playing:
                await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –∏–≥—Ä–∞–µ—Ç–µ, –∂–µ–ª–∞–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ?",reply_markup=kb.main7)
            else:
                if game.infinity:
                    await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∂–∏–∑–Ω–µ–π, –∂–µ–ª–∞–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –µ–µ ?",reply_markup=kb.main4) 
                else:
                    await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å 6 –∂–∏–∑–Ω–µ–π,–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ?",reply_markup=kb.main5)

@router.callback_query(F.data == "start_play")
async def start_play(callback : CallbackQuery):
    await callback.answer("")
    msg = await callback.message.answer("–ñ–¥–µ–º —á—Ç–æ–±—ã AI —Å–¥–µ–ª–∞–ª —Å–ª–æ–≤–æ... ü§ñ")
    word = await asyncio.to_thread(generate)
    await msg.edit_text("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å ! üé∞\n–ú–æ–∂–µ—Ç–µ —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞ !")
    async with async_session() as session:
        game = await session.get(Game, callback.from_user.id)
        if not game:
            game = Game(user_id=callback.from_user.id, word=word, lifes=6, infinity=False, is_playing=True)
            session.add(game)
        else:
            game.word = word
            game.is_playing = True
            if not game.infinity:
                game.lifes = 6
        await session.commit()

@router.message(F.text)
async def play(message : Message):
    if message.text.startswith("/"):
        return
    async with async_session() as session:
        game = await session.get(Game, message.from_user.id)

        if not game.is_playing or not game:
            return

        t = message.text.lower()
        if len(t) != 5:
            await message.reply("–≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚ùå\n–û–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 –±—É–∫–≤ !",reply_markup=kb.main6)
            return

        if t == game.word:
            await message.answer("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ç—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ ! ‚úÖ\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å –µ—â–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚§µÔ∏è",reply_markup=kb.main2)
            game.is_playing = False
            await session.commit()
            return
        
        ans = ["üü•"] * 5
        used = [False] * 5
        for i in range(5):
            if t[i] == game.word[i]:
                ans[i] = "üü©"
                used[i] = True
        for i in range(5):
            if ans[i] == "üü©":
                continue
            for j in range(5):
                if not used[j] and t[i] == game.word[j]:
                    ans[i] = "üü®"
                    used[j] = True
                    break
        res = "".join(ans)

        if not game.infinity:
            game.lifes -= 1
            if game.lifes <= 0:
                await message.answer(f"–¢–≤–æ–∏ –∂–∏–∑–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª !\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ : {game.word}",reply_markup=kb.main2)
                game.is_playing = False
            else:
                await message.answer(f"–ù–µ–º–Ω–æ–∂–∫–æ –Ω–µ –ø–æ–≤–µ–∑–ª–æ !\n–¢–≤–æ–µ —Å–ª–æ–≤–æ: {res}\n–û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π : {game.lifes}",reply_markup=kb.main6)
        else:
            await message.answer(f"–ù–µ–º–Ω–æ–∂–∫–æ –Ω–µ –ø–æ–≤–µ–∑–ª–æ !\n–¢–≤–æ–µ —Å–ª–æ–≤–æ: {res}",reply_markup=kb.main6)

        await session.commit()
    
@router.callback_query(F.data == "settings")
async def settings(callback : CallbackQuery):
    await callback.answer("")
    async with async_session() as session:
        game = await session.get(Game,callback.from_user.id)
        if game and game.infinity:
            await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∂–∏–∑–Ω–µ–π, –∂–µ–ª–∞–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –µ–µ ?",reply_markup=kb.main4) 
        else:
            await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å 6 –∂–∏–∑–Ω–µ–π,–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ?",reply_markup=kb.main5)

@router.callback_query(F.data == "nothing")
async def nothing(callback : CallbackQuery):
    await callback.answer("")
    await callback.message.delete()

@router.callback_query(F.data == "turn_on_inf")
async def turn_on_inf(callback : CallbackQuery):
    await callback.answer("")
    async with async_session() as session:
        game = await session.get(Game,callback.from_user.id)
        game.infinity = True
        await session.commit()
    await callback.message.delete()
    await callback.message.answer("–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∂–∏–∑–Ω–∏ ! ‚ôæÔ∏è",reply_markup=kb.main2)

@router.callback_query(F.data == "turn_off_inf")
async def turn_off_inf(callback : CallbackQuery):
    await callback.answer("")
    async with async_session() as session:
        game = await session.get(Game,callback.from_user.id)
        game.infinity = False
        await session.commit()
    await callback.message.delete()
    await callback.message.answer("–¢–µ–ø–µ—Ä—å —É –≤–∞—Å 6 –∂–∏–∑–Ω–µ–π !",reply_markup=kb.main2)

@router.callback_query(F.data == "quit")
async def quit(callback : CallbackQuery):
    await callback.answer("")
    async with async_session() as session:
        game = await session.get(Game,callback.from_user.id)
        if game:
            if not game.is_playing:
                await callback.message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ ‚ùå")
                return
            game.is_playing = False
            await callback.message.answer(f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Ä–∞–Ω–µ–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ -> {game.word}",reply_markup=kb.main2)
        await session.commit()

@router.callback_query(F.data == "settings_yes")
async def settings_yes(callback : CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    async with async_session() as session:
        game = await session.get(Game,callback.from_user.id)
        if game:
            game.is_playing = False
            await callback.message.answer(f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Ä–∞–Ω–µ–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ -> {game.word}",reply_markup=kb.main2)
            if game.infinity:
                await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∂–∏–∑–Ω–µ–π, –∂–µ–ª–∞–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –µ–µ ?",reply_markup=kb.main4) 
            else:
                await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å 6 –∂–∏–∑–Ω–µ–π,–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ?",reply_markup=kb.main5)
        await session.commit()